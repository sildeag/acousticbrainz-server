FROM ubuntu:latest

ENV LANG="en_US.UTF-8"
ENV LC_ALL="en_US.UTF-8"
ENV DEBIAN_FRONTEND noninteractive
ENV PKG_CONFIG_PATH=$PKG_CONFG_PATH:"/usr/local/lib"

# Be sure to install any runtime dependencies - apt-get clean not required for ubuntu image
RUN apt-get update && apt-get install -y --no-install-recommends \
                       language-pack-en \
                       ca-certificates \
                       qt5-default qtbase5-dev qtchooser qt5-qmake \  
                       build-essential apt-utils \
                       autotools-dev automake autoconf libtool-bin python3-setuptools python3-distutils cmake \
                       python3-dev \
                       python3.6-dev \
                       wget \
                       git \
                       swig \
                       doxygen \
		       libfftw3-dev libass-dev libfreetype6-dev \
  		       libsdl1.2-dev libtheora-dev libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev \
  		       libxcb-xfixes0-dev texinfo zlib1g-dev yasm libfdk-aac-dev libmp3lame-dev libopus-dev \
                       libsamplerate0-dev libtag1-dev libavcodec-dev libavformat-dev libavresample-dev \
                       pkg-config \
                   && rm -rf /var/lib/apt/lists/*
                  
RUN mkdir -p /tmp/yaml \
    && cd /tmp/yaml \
    && git clone https://github.com/yaml/libyaml.git \
    && cd libyaml \
    && ./bootstrap \
    && ./configure && make && make install \
    && cd /
#
# Chromaprint
RUN git clone https://github.com/acoustid/chromaprint.git /tmp/chromaprint \
    && cd /tmp/chromaprint \
    && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TOOLS=ON \
    && make && make install \
    && cd /
                     
# Waf
# See https://github.com/waf-project/waf.git
RUN git clone https://github.com/waf-project/waf.git /tmp/waf \
    && cd /tmp/waf \
    && python3 ./waf-light configure --tools=swig,qt5,qt4 build \
    && cd /

# Gaia

RUN qtchooser=qt5 
ENV QT_SELECT=qt5

#ENV CPATH /usr/include/x86_64-linux-gnu/qt5/QtCore:/usr/include/x86_64-linux-gnu/qt5:/usr/include/x86_64-linux-gnu/qt5/QtWidgets:/usr/#include/x86_64-linux-gnu/qt5/QtGui:/usr/include/python2.7:$CPATH 
 
#ENV QTDIR=/usr/lib/x86_64-linux-gnu/qt5
#ENV PATH=$QTDIR/bin:$PATH
#ENV LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
#ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"

RUN git clone https://github.com/sildeag/gaia /tmp/gaia    \
    && cd /tmp/gaia \
    && cp /tmp/waf/waf . \
    && python3 ./waf configure --with-python-bindings --with-gaia-qt5 \ 
    && cat /tmp/gaia/build/config.log \
    && python3 ./waf \
    && python3 ./waf install \
    && cd / && rm -r /tmp/gaia

# Essentia
# See http://essentia.upf.edu/documentation/installing.html
RUN git clone https://github.com/sildeag/essentia /tmp/essentia \
    && cd /tmp/essentia \
    && cp /tmp/waf/waf . \
    && python3 ./waf configure --mode=release --with-gaia --with-gaia-qt5 --with-example=streaming_extractor_music_svm \
    && python3 ./waf \
    && python3 ./waf install \
    && ldconfig \
    && cp /tmp/essentia/src/examples/essentia_streaming_extractor_music_svm /code/hl_extractor/streaming_extractor_music_svm \
    && cd / \ 
    && rm -r /tmp/essentia

# SVM models
RUN mkdir /tmp/models \
    && cd /tmp/models \
    && curl --silent -o models.tar.gz http://essentia.upf.edu/documentation/svm_models/essentia-extractor-svm_models-v2.1_beta1.tar.gz \
    && tar -xvzf models.tar.gz \
    && mv /tmp/models/v2.1_beta1/svm_models /data/ \
    && cd / && rm -r /tmp/models
